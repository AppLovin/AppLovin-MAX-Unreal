require 'json'
require 'pathname'
require 'xcodeproj'

# -- Pre-Install -- #
# NOTE: Do not use pre-install hook since CocoaPods needs generated Xcode project before then

# Check if file is in the same directory as uproject
uproject_file = Dir.glob("*.uproject").first
if uproject_file.nil?
  abort "Error: No .uproject file found in current directory. The Podfile must be copied into your Unreal project root directory"
end

project_name = File.basename(uproject_file, ".uproject")
xcodeproj_path = "Intermediate/ProjectFiles/#{project_name} (IOS).xcodeproj"

uproject_data = File.read(uproject_file)
uproject_json = JSON.parse(uproject_data)
ue_version = uproject_json["EngineAssociation"]

puts "Configuring '#{project_name}' iOS build for AppLovin MAX"

# Run build tool to generate the Xcode project
if !File.exist?(xcodeproj_path)
  abs_uproject_file = File.expand_path(uproject_file, base_directory = Dir.pwd)
  # TODO: Add custom logic for UE 5.3 which doesn't have functional RunUBT.sh??
  ubt_path = "/Users/Shared/Epic\ Games/UE_#{ue_version}/Engine/Build/BatchFiles/RunUBT.sh"
  system "\"#{ubt_path}\" -ProjectFiles -XCodeProjectFiles -Project=\"#{abs_uproject_file}\""
end

# -- Pods -- #

workspace "#{project_name} (IOS)"

use_frameworks!
inhibit_all_warnings!
platform :ios, '12.0'

target 'AppLovinMAXDemo' do
  project xcodeproj_path, 'DebugGame' => :debug, 'Development' => :debug, 'Shipping' => :release

  pod 'AppLovinSDK', '13.0.0' # TODO: Get the value dynamically

  # TODO: Add your adapter dependencies here
end

# -- Post-Install -- #

post_install do |installer|
  puts "Running post install actions"

  # Update the Unreal project's xcconfigs to include CocoaPods xcconfigs
  Dir.glob("**/#{project_name}_*.xcconfig").each do |project_xcconfig_path|
    project_path = Pathname.new(project_xcconfig_path).dirname
    build_config = project_xcconfig_path.match(/_(\w+)\.xcconfig$/)[1].downcase
    pod_xcconfig_path = Pathname.new("Pods/Target Support Files/Pods-#{project_name}/Pods-#{project_name}.#{build_config}.xcconfig")
    relative_pod_xcconfig_path = pod_xcconfig_path.relative_path_from(project_path)

    include_text = "#include \"#{relative_pod_xcconfig_path}\"\n"    
    if !File.readlines(project_xcconfig_path).grep(include_text).any?
      puts "Updating #{project_xcconfig_path}"

      original_text = File.read(project_xcconfig_path)
      File.open(project_xcconfig_path, 'w') do |file|
        file.write(include_text + original_text)
      end
    else
      puts "Skipping #{project_xcconfig_path}"
    end
  end

  # Update Unreal Xcode project configuration
  xcode_project = Xcodeproj::Project.open(xcodeproj_path)
  xcode_project.targets.first.build_configurations.each do |config|
    config.build_settings["CONFIGURATION"] = "$(UE_TARGET_CONFIG)"
  end

  xcode_project.save()
end

