// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AppLovinSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AppLovinSDK
import Foundation
import Swift
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers open class AdapterDelegate<T, U> : ObjectiveC.NSObject where T : AppLovinSDK.ALMediationAdapter, U : AppLovinSDK.MAAdapterDelegate {
  unowned final public let adapter: T
  weak public var delegate: U?
  final public let adFormat: AppLovinSDK.MAAdFormat
  final public let parameters: AppLovinSDK.MAAdapterResponseParameters
  final public let adIdentifier: Swift.String
  public func log(adEvent: AppLovinSDK.LogEvent.Ad, id: Swift.String?, appending suffix: Swift.String = "")
  public func log(adEvent: AppLovinSDK.LogEvent.Ad, appending suffix: Swift.String = "")
  public func logDebug(_ message: Swift.String)
  public func logInfo(_ message: Swift.String)
  public func logWarn(_ message: Swift.String)
  public func logError(_ message: Swift.String)
  public func logUserError(_ message: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class InterstitialAdapterDelegate<T> : AppLovinSDK.AdapterDelegate<T, AppLovinSDK.MAInterstitialAdapterDelegate> where T : AppLovinSDK.ALMediationAdapter {
  public init(adapter: T, delegate: AppLovinSDK.MAInterstitialAdapterDelegate, parameters: AppLovinSDK.MAAdapterResponseParameters)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class RewardedAdapterDelegate<T> : AppLovinSDK.AdapterDelegate<T, AppLovinSDK.MARewardedAdapterDelegate> where T : AppLovinSDK.ALMediationAdapter {
  public var hasGrantedReward: Swift.Bool {
    get
  }
  public init(adapter: T, delegate: AppLovinSDK.MARewardedAdapterDelegate, parameters: AppLovinSDK.MAAdapterResponseParameters)
  public func setGrantedReward()
  @objc deinit
}
@_inheritsConvenienceInitializers open class AdViewAdapterDelegate<T> : AppLovinSDK.AdapterDelegate<T, AppLovinSDK.MAAdViewAdapterDelegate> where T : AppLovinSDK.ALMediationAdapter {
  public init(adapter: T, delegate: AppLovinSDK.MAAdViewAdapterDelegate, adFormat: AppLovinSDK.MAAdFormat, parameters: AppLovinSDK.MAAdapterResponseParameters)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NativeAdAdapterDelegate<T> : AppLovinSDK.AdapterDelegate<T, AppLovinSDK.MANativeAdAdapterDelegate> where T : AppLovinSDK.ALMediationAdapter {
  final public let templateName: Swift.String?
  public init(adapter: T, delegate: AppLovinSDK.MANativeAdAdapterDelegate, parameters: AppLovinSDK.MAAdapterResponseParameters)
  @objc deinit
}
extension AppLovinSDK.ALMediationAdapter {
  public typealias MAAdapterInitializationCompletionHandler = (AppLovinSDK.MAAdapterInitializationStatus, Swift.String?) -> ()
  public func presentingViewController(for parameters: AppLovinSDK.MAAdapterResponseParameters) -> UIKit.UIViewController
}
public struct LogEvent {
  public enum Lifecycle {
    case initializing(parameters: [Swift.String : Any]? = nil)
    case initializeSuccess(parameters: [Swift.String : Any]? = nil)
    case initializeFailure(description: Swift.String? = nil)
    case alreadyInitialized
    case destroy
  }
  public enum Signal {
    case collecting
    case collectionSuccess
    case collectionFailed(description: Swift.String? = nil)
  }
  public enum Ad {
    case loading(isBidding: Swift.Bool = false)
    case loaded
    case loadFailed(error: AppLovinSDK.MAAdapterError? = nil)
    case expired
    case notReady
    case willShow
    case showing
    case displayed
    case displayFailed(error: AppLovinSDK.MAAdapterError? = nil)
    case clicked
    case hidden
    case videoStarted
    case videoPaused
    case videoCompleted
    case grantedReward
    case userRewarded(reward: AppLovinSDK.MAReward)
    case expanded
    case collapsed
    case willLeaveApplication
    case missingRequiredAssets
    case registerAdViewsFailed(description: Swift.String? = nil)
    case preparingViewsForInteraction(views: [UIKit.UIView], container: UIKit.UIView)
  }
}
extension AppLovinSDK.ALMediationAdapter {
  @objc dynamic open var thirdPartySdkName: Swift.String {
    @objc get
  }
  public func log(lifecycleEvent: AppLovinSDK.LogEvent.Lifecycle, appending suffix: Swift.String = "")
  public func log(signalEvent: AppLovinSDK.LogEvent.Signal, appending suffix: Swift.String = "")
  public func log(adEvent: AppLovinSDK.LogEvent.Ad, id: Swift.String? = nil, adFormat: AppLovinSDK.MAAdFormat, appending suffix: Swift.String = "")
}
extension Swift.String {
  public var formattedValueLog: Swift.String {
    get
  }
  public var formattedErrorLog: Swift.String {
    get
  }
}
extension Swift.Dictionary where Key == Swift.String, Value == Any {
  public var formattedValueLog: Swift.String {
    get
  }
}
extension Swift.Error {
  public var code: Swift.Int {
    get
  }
}
